{
  "title": "Are You Losing Money Because of Lack of Documentation?",
  "tags": [
    {
      "title": "documentation",
      "slug": "documentation"
    },
    {
      "title": "doxxu",
      "slug": "doxxu"
    }
  ],
  "author": "James C Russell",
  "email": "james@pay-per-task.com",
  "slug": "are-you-losing-money-because-of-lack-of-documentation",
  "published_on": "2014-06-03",
  "excerpt": "Excerpt",
  "body": "<h2>What's the Problem with Missing Documentation?</h2>\n<p>\n  <em>Not many companies really care about documentation. And not many of them know how much lack of thereof costs. And I'm not talking just about money, what's more important is its <strong>impact on the error margin</strong> especially on critical things especially in new hires. Is your Achilles' heel exposed?</em>\n</p>\n\n<img src=\"/assets/posts/docs.ppt.png\">\n\n<p>\n  <em>Disclaimer: When I talk about documentation, I mean <strong>internal documentation</strong> of software products. There should be documentation for more than software products, but that's not within the scope of this article.</em>\n</p>\n\n<h3>On-Boarding Time</h3>\n<p>\n  The first problem is obvious: <strong>on-boarding of every new hire takes more time</strong>, hence it costs more money. On top of that, the new guy will be distracting his colleagues with questions and distractions are really, really bad for creative professions.\n</p>\n\n<p>\n  Now I'm not arguing against asking questions, I'm merely saying that if those are questions every new developer will ask, these just should be documented.\n</p>\n\n<p>\n  It might be hard to quantify and it's non-obvious where the time is wasted. It ranges from relatively easy to figure out questions such as <em>\"Where do I start?\"</em> or <em>\"How do I run the tests?\"</em> to <em>\"It doesn't behave as it should, <strong>what am I missing</strong>?\"</em> and \"How is our <strong>server set up</strong>, I need to change XY?\" which in my experience is where most of time is unnecessarily wasted.\n</p>\n\n<h3>Highly Increased Error Margin Especially on Critical Errors</h3>\n<p>\n  So that's one thing, losing money AND time which you could use to get ahead of your competition. Still, that's not the worst. If a developer <strong>have to make assumptions</strong>, nasty things happen.\n</p>\n\n<blockquote>\n  <p>\n    <em>I can clear database on the staging server, right? It's only for QA anyway, who cares. What?? It was using the production database???</em>\n  </p>\n</blockquote>\n\n<p>\n  OK, that's an extreme example that should never happen,  but things like that actually do happen. Especially in the beginnings, when you cut corners. And I'd argue that <strong>percentage of fatal errors</strong> such as this one is significantly higher if the documentation is missing.\n</p>\n\n<p>\n  If you know the app, sometimes you break this and that on the server, but you'd never make a mistake like this one. But if you don't know the app yet, it can happen.\n</p>\n\n<p>\n  And what if your <strong>only senior developer</strong> who knows the project in-and-out <strong>leaves</strong>?\n</p>\n\n<h2>Why Don't We Write Documentation?</h2>\n<p>\n  We're lazy, that's why. Typically developers write documentation in Markdown format, then they have to commit the changes and push them to GitHub. Then, they go to GitHub and preview that everything looks good. At least that's what I do and what I've seen others to do. That's too many steps for something essential.\n</p>\n\n<p>\n  I believe <strong>by simplifying the workflow, we can make it more natural for developers to write documentation</strong>. (Keep reading, I have a solution!)\n</p>\n\n<h2>What Types of Documentation Do I Need to Care About?</h2>\n<p>\n  <strong>High level documentation</strong> is what I talked about until now. Things like dependencies of our app, how to run tests, how to deploy it to staging and production, server configuration and so on and so forth. But there's another important and equally overlooked type of documentation I'd like to mention and that is what I call process documentation.\n</p>\n\n<p>\n  <strong>Process documentation</strong> is documenting our thinking process. Often we find something to be unintuitive and oftentimes the reason can be tracked to some <em>either legacy or not obvious reason</em>. Many especially younger developers tend to change this sort of \"problems\" only to realise what reason did it have in the first place.\n</p>\n\n<p>\n  This is done primarily through <strong>issue trackers</strong>, <strong>pull requests</strong> on GitHub and <strong>commit messages</strong>.\n</p>\n\n<p>\n  The documentation you <em>don't need to care about</em>, in my opinion, is <strong>API documentation</strong>. I'm mentioning it because that's what many developers imagine when you say documentation and some of them will insist that it's important. For a web application, it probably isn't.\n</p>\n\n<h2>3 Action Steps You Can Take NOW to Make Your Documentation Better</h2>\n<ol>\n  <li>\n<strong>Don't force any documentation system</strong> on your developers: let them choose. If they will like it, they are more likely to use it. If you are using GitHub, they have a nice wiki system and in the bonus action I'm going to tell you about another software I just made available – keep reading!</li>\n  <li>\n<strong>Consider using pull requests</strong> as the only way how to introduce features to the codebase.</li>\n<li>Make writing and updating documentation AND issue tracker <strong>part of the process</strong>.</li>\n</ol>\n\n<h2>BONUS: We Are Making Doxxu Free!</h2>\n<p>\n  <a target=\"_blank\" href=\"https://github.com/botanicus/doxxu\">Doxxu</a> is our application we use for viewing documentation. I <strong>extracted</strong> it <strong>from pay-per-task</strong> and made it <strong>available to anyone</strong>: feel free to use it! Here is how it looks like:\n</p>\n\n\n<!-- Image -->\n\n\n<p>\n  How does it help?\n</p>\n\n<ol>\n  <li>It can <strong>run locally</strong>. You just save changes and preview it, no unnecessary steps in the middle.</li>\n  <li>All the documentation <strong>stays in your project's source control</strong> repository. That means you're keep all the iterations of it and also there's no vendor lock-in.</li>\n  <li>It has all the features developers expect like <strong>Markdown support</strong> and <strong>syntax highlighting</strong>.</li>\n</ol>\n\n<p>\n  If you decide to use doxxu, I'd be happy if you leave a comment about your experience and if you want, you can <a target=\"_blank\" href=\"https://twitter.com/paypertask/status/473752304118939648/\"><strong>share it on Twitter</strong></a> (here's <a target=\"_blank\" href=\"https://twitter.com/paypertask/status/473752304118939648/\">our status</a> which you can retweet).\n</p>\n\n<p>\n  Enjoy!\n</p>"
}
