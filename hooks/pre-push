#!/bin/sh

# Make sure that the master branch is always up to date.
# Thank to this hook, we no longer have to do git push &
# git push origin master:deployment.

# Install:
# cp -f hooks/pre-push .git/hooks/
# for repo in .git/modules/*; do
#   cp -f hooks/pre-push $repo/hooks/
# done

# An example hook script to verify what is about to be pushed.  Called by "git
# push" after it has checked the remote status, but before anything has been
# pushed.  If this script exits with a non-zero status nothing will be pushed.
#
# This hook is called with the following parameters:
#
# $1 -- Name of the remote to which the push is being done
# $2 -- URL to which the push is being done
#
# If pushing without using a named remote those arguments will be equal.
#
# Information about the commits which are being pushed is supplied as lines to
# the standard input in the form:
#
#   <local ref> <local sha1> <remote ref> <remote sha1>
#
# This sample shows how to prevent push of commits where the log message starts
# with "WIP" (work in progress).

IFS=' '
while read local_ref local_sha remote_ref remote_sha; do
  if [ $(basename $remote_ref) = "deployment" ]; then
    echo "~ Updating master branch first."
    git push origin master &> /dev/null
  fi
done
